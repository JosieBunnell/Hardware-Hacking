april 15/2019

import smbus
import time

bus = smbus.SMBus(1) # connects to i2C channel 1 and GPIO i2C pins

SENSOR_ADDRESS = 0x60 # The address of the i2c device in hex without the r/w bit

COMMAND_REGISTER = 0X18    # write commands to this register (see pg. 22 of data sheet)
HW_KEY_REGISTER = 0X07
PARAM_WR = 0x17    # 'mailbox register for passing parameters from host to sequencer'
UV_INDEX = 0x2C     #aux_data0/uvindex0
UV_INDEX2 = 0x2D
ALS_VIS_DATA0 = 0x22
ALS_VIS_DATA1 = 0x23
UCOEF0 = 0x13
UCOEF1 = 0x14
UCOEF2 = 0x15
UCOEF3 = 0x16
RESPONSE_REG = 0X20
NOP = 0x0
CHLIST = 0x01
EN_UV = 0x80
ENALSVIS = 0x10
PARAM_RD = 0x2E

def wake_up(bus):     #writes initial command (equivalent of reset?) to command register to wake device up
     bus.write_byte_data(SENSOR_ADDRESS, COMMAND_REGISTER, NOP)

def write_to_hwkey(bus):     #writes 0x17 to hardware key register for some reason
     bus.write_byte_data(SENSOR_ADDRESS, HW_KEY_REGISTER, 0x17)

def write_parameter(bus, parameter, value):
     bus.write_byte_data(SENSOR_ADDRESS, PARAM_WR, value)
     bus.write_byte_data(SENSOR_ADDRESS, COMMAND_REGISTER, parameter)
     param_read = bus.read_byte_data(SENSOR_ADDRESS, PARAM_RD)
     print(param_read)
     return param_read

def enable_UV_coeff(bus, register, number):
     bus.write_byte_data(SENSOR_ADDRESS, register, number)

def force_measure(bus):     #force a single measurement
     bus.write_byte_data(SENSOR_ADDRESS, COMMAND_REGISTER, 0x06)

def get_UV_reading(bus):
     raw_reading = bus.read_byte_data(SENSOR_ADDRESS, UV_INDEX)
     print(raw_reading)
     return raw_reading

def get_UV_reading2(bus):
     raw_uv_read = bus.read_byte_data(SENSOR_ADDRESS, UV_INDEX2)
     print(raw_uv_read)
     return raw_uv_read

def get_vis_read(bus):
     raw_read_v = bus.read_byte_data(SENSOR_ADDRESS, ALS_VIS_DATA0)
     print(raw_read_v)
     return raw_read_v
     
def get_vis_read2(bus):
     raw_read_v2 = bus.read_byte_data(SENSOR_ADDRESS, ALS_VIS_DATA1)
     print(raw_read_v2)
     return raw_read_v2

def get_response(bus):
     resp_read = bus.read_byte_data(SENSOR_ADDRESS, RESPONSE_REG)
     print(resp_read)
     return resp_read

wake_up(bus)
time.sleep(.01)

write_to_hwkey(bus)
time.sleep(.01)

enable_UV_coeff(bus, UCOEF0, 0x29)
enable_UV_coeff(bus, UCOEF1, 0x89)
enable_UV_coeff(bus, UCOEF2, 0x02)
enable_UV_coeff(bus, UCOEF3, 0x00)

write_parameter(bus, CHLIST, EN_UV)
write_parameter(bus, CHLIST, ENALSVIS)

force_measure(bus)
time.sleep(.01)

get_UV_reading(bus)
get_UV_reading2(bus)
get_vis_read(bus)
get_vis_read2(bus)
get_response(bus)
